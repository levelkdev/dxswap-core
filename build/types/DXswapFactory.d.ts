/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class DXswapFactory extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): DXswapFactory;
  methods: {
    allPairs(arg0: number | string): TransactionObject<string>;

    allPairsLength(): TransactionObject<string>;

    createPair(tokenA: string, tokenB: string): TransactionObject<string>;

    feeTo(): TransactionObject<string>;

    feeToSetter(): TransactionObject<string>;

    getPair(arg0: string, arg1: string): TransactionObject<string>;

    protocolFeeDenominator(): TransactionObject<string>;

    setFeeTo(_feeTo: string): TransactionObject<void>;

    setFeeToSetter(_feeToSetter: string): TransactionObject<void>;

    setProtocolFee(
      _protocolFeeDenominator: number | string
    ): TransactionObject<void>;

    setSwapFee(
      _pair: string,
      _swapFee: number | string
    ): TransactionObject<void>;
  };
  events: {
    PairCreated: ContractEvent<{
      token0: string;
      token1: string;
      pair: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
